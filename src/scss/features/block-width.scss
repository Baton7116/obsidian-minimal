/* Line widths ------------------------------------ */

/* Set overall context to 100% width */
.markdown-preview-view .markdown-preview-sizer.markdown-preview-sizer {
	max-width: 100%;
	margin-inline: auto;
	width: 100%;
}
.markdown-source-view.mod-cm6.is-readable-line-width .cm-content,
.markdown-source-view.mod-cm6.is-readable-line-width .cm-sizer {
	max-width: 100%;
	width: 100%;
}

/* Set inner content to line width */
.markdown-preview-view.is-readable-line-width .markdown-preview-sizer > div,
.markdown-source-view.mod-cm6 .cm-contentContainer.cm-contentContainer > .cm-content > div,
.markdown-source-view.mod-cm6 .cm-sizer > .inline-title,
.markdown-source-view.mod-cm6 .cm-sizer > .embedded-backlinks  {
	max-width: var(--max-width);
	width: var(--line-width-adaptive);
	margin-inline: auto !important;
}

/* Content rules ------------------------------------

   The benefit of this approach is that it covers all
   levels of specificity: global, per file, and element-level.
   It means we don't have to write long specific selectors
   like `.table-100.markdown-source-view...`
*/

body {
	--container-table-width: var(--line-width-adaptive);
	--container-table-max-width: var(--max-width);
	--table-max-width: none;
	--table-width: auto;

	--container-img-width: var(--line-width-adaptive);
	--container-img-max-width: var(--max-width);
	--img-max-width: none;
	--img-width: auto;

	--container-chart-width: var(--line-width-adaptive);
	--container-chart-max-width: var(--max-width);
	--chart-max-width: none;
	--chart-width: auto;

	--container-map-width: var(--line-width-adaptive);
	--container-map-max-width: var(--max-width);
	--map-max-width: none;
	--map-width: auto;

	--container-iframe-width: var(--line-width-adaptive);
	--container-iframe-max-width: var(--max-width);
	--iframe-max-width: none;
	--iframe-width: auto;
}

.table-wide,
.table-max,
.table-100 {
	--table-max-width: 100%;
	--table-width: 100%;}
.table-wide {
	--container-table-width: var(--line-width-wide);}
.table-max {
	--container-table-width: var(--max-width);}
.table-100 {
	--container-table-width: 100%;
	--container-table-max-width: 100%;
	--table-edge-cell-padding: 20px;
	.dataview.list-view-ul {
		max-width: var(--max-width);
		width: var(--line-width-adaptive);
		margin-inline: auto;
	}
}

.img-wide,
.img-max,
.img-100 {
	--img-max-width: 100%;
	--img-width: 100%;}
.img-wide {
	--container-img-width: var(--line-width-wide);}
.img-max {
	--container-img-width: var(--max-width);}
.img-100 {
	--container-img-width: 100%;
	--container-img-max-width: 100%;}

.map-wide,
.map-max,
.map-100 {
	--map-max-width: 100%;
	--map-width: 100%;}
.map-wide {
	--container-map-width: var(--line-width-wide);}
.map-max {
	--container-map-width: var(--max-width);}
.map-100 {
	--container-map-width: 100%;
	--container-map-max-width: 100%;}

.chart-wide,
.chart-max,
.chart-100 {
	--chart-max-width: 100%;
	--chart-width: 100%;}
.chart-wide {
	--container-chart-width: var(--line-width-wide);}
.chart-max {
	--container-chart-width: var(--max-width);}
.chart-100 {
	--container-chart-width: 100%;
	--container-chart-max-width: 100%;}

.iframe-wide,
.iframe-max,
.iframe-100 {
	--iframe-max-width: 100%;
	--iframe-width: 100%;}
.iframe-wide {
	--container-iframe-width: var(--line-width-wide);}
.iframe-max {
	--container-iframe-width: var(--max-width);}
.iframe-100 {
	--container-iframe-width: 100%;
	--container-iframe-max-width: 100%;}


/* Block widths ------------------------------------

   Because we are using :has() this method requires
   Obsidian installer 1.1.9 or above. However it means
   we no longer require Contextual Typography plugin.
*/

.markdown-source-view.mod-cm6 .cm-contentContainer.cm-contentContainer>.cm-content,
.markdown-preview-view.is-readable-line-width .markdown-preview-sizer {

	/* Tables */
	.cm-table-widget,
	> div:has(>table),
	> div:has(>.block-language-dataview) {
		width: var(--container-table-width);
		max-width:var(--container-table-max-width);
	}
	table {
		width: var(--table-width);
		max-width:var(--table-max-width);
	}

	/* Images */
	> .image-embed,
	> div:has(.image-embed) {
		width: var(--container-img-width);
		max-width:var(--container-img-max-width);

		img {
			max-width:var(--img-max-width);
		}
	}

	/* Maps */
	div:has(>.block-language-chart) {
		width: var(--container-chart-width);
		max-width:var(--container-chart-max-width);

		canvas {
			max-width:var(--map-chart-width);
		}
	}

	/* Maps */
	div:has(>.block-language-leaflet) {
		width: var(--container-map-width);
		max-width:var(--container-map-max-width);

		iframe {
			max-width:var(--map-max-width);
		}
	}

	/* Iframes */
	> div:has(>iframe),
	div:has(>.cm-html-embed) {
		width: var(--container-iframe-width);
		max-width:var(--container-iframe-max-width);

		iframe {
			max-width:var(--map-iframe-width);
		}
	}
}
